#!/usr/bin/env bash

# -----------------------------------------------------------------
# Programmable completion specification for conntrack (netfilter)
# http://www.netfilter.org/projects/conntrack/index.html
#
# Project home:
# https://github.com/AllKind/conntrack-tools-bash_completion
# http://sourceforge.net/p/conntrack-tools-bash-compl
# -----------------------------------------------------------------

# Copyright (C) 2016 Mart Frauenlob aka AllKind (AllKind@fastest.cc)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# -----------------------------------------------------------------
# Requirements:
#
# The bash completion package version 2.0 or greater is recommended.
# https://github.com/scop/bash-completion
# If bash completion is present, and the version includes the
# `_init_completion()' function, completion on variables and redirection
# is available in addition. Otherwise only option completion is fully supported.
# -----------------------------------------------------------------

# -----------------------------------------------------------------
# Installation (quote from bash-completion README):
#
# Install it in one of the directories pointed to by
# bash-completion's pkgconfig file variables.  There are two
# alternatives: the recommended one is 'completionsdir' (get it with
# "pkg-config --variable=completionsdir bash-completion") from which
# completions are loaded on demand based on invoked commands' names,
# so be sure to name your completion file accordingly, and to include
# for example symbolic links in case the file provides completions
# for more than one command.  The other one which is present for
# backwards compatibility reasons is 'compatdir' (get it with
# "pkg-config --variable=compatdir bash-completion") from which files
# are loaded when bash_completion is loaded.
#
# For packages using GNU autotools the installation can be handled
# for example like this in configure.ac:
#
#  PKG_CHECK_VAR(bashcompdir, [bash-completion], [completionsdir], ,
#    bashcompdir="${sysconfdir}/bash_completion.d")
#  AC_SUBST(bashcompdir)
#
# ...accompanied by this in Makefile.am:
#
#  bashcompdir = @bashcompdir@
#  dist_bashcomp_DATA = # completion files go here
#
# For cmake we ship the bash-completion-config.cmake and
# bash-completion-config-version.cmake files. Example usage:
#
#  find_package(bash-completion)
#  if(BASH_COMPLETION_FOUND)
#    message(STATUS
#      "Using bash completion dir ${BASH_COMPLETION_COMPLETIONSDIR}")
#  else()
#    set (BASH_COMPLETION_COMPLETIONSDIR "/etc/bash_completion.d")
#    message (STATUS
#      "Using fallback bash completion dir ${BASH_COMPLETION_COMPLETIONSDIR}")
#  endif()
#
#  install(FILES your-completion-file DESTINATION
#    ${BASH_COMPLETION_COMPLETIONSDIR})
#
# For backwards compatibility it is still possible to put it into
# ~/.bash_completion or /etc/bash_completion.d/.
# -----------------------------------------------------------------
#
# Version 1.0
#
# -----------------------------------------------------------------

shopt -s extglob

_ct_build_comma_list() {
# build comma separated list - entries are unique
local -i i x
local lcur="$1" lmatch="" rlist="" prefix=""
shift
local arr_list=("${@}")
local str_pat=$(IFS=\|; printf "%s" "${arr_list[*]}")
compopt -o nospace
if [[ $lcur ]]; then
    if [[ ${lcur} = @($str_pat) ]]; then # word found
        prefix="${lcur}," rlist="$lcur" lmatch=""
    elif [[ ${lcur:$((${#lcur}-1))} = , ]]; then # last char is a comma
        prefix="${lcur}" rlist="$lcur" lmatch=""
    elif [[ ${lcur:$((${#lcur}-1))} != , ]]; then # last char is not a comma
        if [[ ${lcur##*,} != @($str_pat) ]]; then # incomplete word
            prefix="${lcur%${lcur##*,}}"
            rlist="${lcur%${lcur##*,}}"
            if [[ $lcur = *,* ]]; then # already a list present
                lmatch="${lcur##*,}"
            else
                lmatch="${lcur}"
            fi
            [[ $prefix && ${prefix:$((${#prefix}-1))} != , ]] && prefix="${prefix},"
        else
            prefix="${lcur}," rlist="$lcur" lmatch=""
        fi
    fi
    for x in ${rlist//,/ }; do
        for i in ${!arr_list[@]}; do
            if [[ $x = ${arr_list[i]} ]]; then
                unset arr_list[i]
            fi
        done
    done
fi
((${#arr_list[@]} == 1)) && compopt +o nospace
COMPREPLY=( $( compgen -P "$prefix" -W '${arr_list[@]}' -- "$lmatch" ) )
}

_conntrack_complete() {
# at least bash 4 is required
((${BASH_VERSINFO[0]} < 4)) && return 0
local cur prev cword words
local -i i

# main command
local str_act="" str_table="" str_proto=""

# main commands
local -a arr_cmd_short=( -L -G -D -I -U -E -F -C -S )
local -a arr_cmd_long=( --dump --get --delete --create --update --event --flush --count --stats )
local -a arr_common_opts=(
--orig-src --orig-dst
--reply-src --reply-dst
--proto
#--family # -L, --dump only
--timeout
--status
--zone
--orig-zone --reply-zone
#--buffer-size # -E, --event only
#--mask-src --mask-dst # For conntrack this option is only available in conjunction with
# "-L, --dump", "-E, --event", "-U --update" or "-D --delete".
# For expectations this option is only available in conjunction with "-I, --create".
)
local -a arr_conntrack_opts=(
--src-nat --dst-nat --any-nat
--mark --secmark
#--event-mask # -E, --event only
#--zero # -L, --dump only
#--output # -L, --dump, -G, --get only
#--label # -L, --dump, -E, --event, -U, --update, -D, --delete only
)
local -a arr_expect_opts=( --tuple-src --tuple-dst )
local -a arr_update_opts=( --label-add --label-del )

# options that require an argument
local -a arr_opts_w_arg=(
-b --buffer-size
-f --family
-e --event-mask
-o --output
-l --label
# short forms that need to be covered if user uses them manually on cmd-line
-p -s -d -r -q -m -u
)
# protocol depending options
local -a arr_proto_svc_opts=(
--sport --orig-port-src --dport --orig-port-dst
--reply-port-src --reply-port-dst
)
local -a arr_proto_sctp_opts=( --orig-vtag --reply-vtag )
local -a arr_proto_icmp_opts=( --icmp-type --icmp-code --icmp-id )
local -a arr_proto_gre_opts=(
--srckey --orig-key-src --dstkey --orig-key-dst --reply-key-src --reply-key-dst
)
# all protocol options joined
local -a arr_proto_opts=(
"${arr_proto_svc_opts[@]}" --state
"${arr_proto_icmp_opts[@]}"
"${arr_proto_gre_opts[@]}"
"${arr_proto_sctp_opts[@]}"
)

COMPREPLY=()

# if _init_completion() from bash_completion is available, use it to deal with
# variables and redirections. otherwise use _get_comp_words_by_ref().
# as fallback we commpose our own variables.
if declare -f _init_completion &>/dev/null; then
	_init_completion || return # ret val -gt 0 = nothing more to do
elif declare -f _get_comp_words_by_ref &>/dev/null; then
    _get_comp_words_by_ref cur prev cword words || return
else # not so neat, but a workaround
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    cword=$COMP_CWORD
    for i in ${!COMP_WORDS[@]}; do words[i]="${COMP_WORDS[i]}"; done
fi

# gather information about the command line
if [[ ${words[1]} = @($(IFS='|';printf "%s|%s\n" "${arr_cmd_short[*]}" "${arr_cmd_long[*]}")) ]]
then
	str_act="${words[1]}" # this is the main command
fi
if [[ ${words[2]} = @(conntrack|expect|dying|unconfirmed) ]]; then
	str_table="${words[2]}" # this is the table
fi
for ((i=3; i < ${#words[@]}-1; i++)); do
	if [[ ${words[i]} = @(-p|--proto|--protonum) ]]; then
		# this is the protocol
		str_proto="${words[i+1],,}"
	fi
done

# translate numeric protocol definitions to names
if [[ $str_proto = +([[:digit:]]) ]]; then
	if ((str_proto == 1)); then str_proto=icmp
	elif ((str_proto == 6)); then str_proto=tcp
	elif ((str_proto == 17)); then str_proto=udp
	elif ((str_proto == 33)); then str_proto=dccp
	elif ((str_proto == 47)); then str_proto=gre
#	elif ((str_proto == 58)); then str_proto=ipv6-icmp
	elif ((str_proto == 132)); then str_proto=sctp
	elif ((str_proto == 136)); then str_proto=udplite
	fi
fi

# here we go
if ((cword == 1)); then # main command
	COMPREPLY=( $(compgen -W '${arr_cmd_long[@]} --version' -- "$cur") )
elif ((cword == 2)) && [[ $prev = @($(IFS='|';printf "%s|%s\n" "${arr_cmd_short[*]/-S/}" "${arr_cmd_long[*]/--stats/}")) ]]
then # table names - but not with -S, --stats
	COMPREPLY=( $(compgen -W 'conntrack expect dying unconfirmed' -- "$cur") )
elif ((cword >= 3)); then
	if [[ $str_act = @(-F|-C|-S|--flush|--count|--stats|--version) ]]; then
		return 0 # no options available on this command
	fi
	# option request
	if [[ $cur = -* ]]; then
		if [[ $prev = @($(IFS='|';printf "%s|%s|%s|%s|%s|%s\n" "${arr_opts_w_arg[*]}" "${arr_common_opts[*]//--*zone/}" "${arr_conntrack_opts[*]}" "${arr_expect_opts[*]}" "${arr_update_opts[*]}" "${arr_proto_opts[*]}")) ]]
		then
			return 0 # options expecting an argument
		fi
		COMPREPLY=( $(compgen -W '${arr_common_opts[@]}' -- "$cur") )
		# table depending options
		if [[ $str_table = conntrack ]]; then
			COMPREPLY+=( $(compgen -W '${arr_conntrack_opts[@]}' -- "$cur") )
			if [[ $str_act = @(-L|--dump|-E|--event|-U|--update|-D|--delete) ]]; then
				COMPREPLY+=( $(compgen -W '--mask-src --mask-dst' -- "$cur") )
			fi
		elif [[ $str_table = expect ]]; then
			COMPREPLY+=( $(compgen -W '${arr_expect_opts[@]}' -- "$cur") )
			if [[ $str_act = @(-I|--create) ]]; then
				COMPREPLY+=( $(compgen -W '--mask-src --mask-dst' -- "$cur") )
			fi
		fi
		# command depending options
		if [[ $str_act = @(-U|--update) ]]; then
			COMPREPLY+=( $(compgen -W \
				'${arr_update_opts[@]} --label --label-add --label-del' -- "$cur") )
		elif [[ $str_act = @(-E|--event) ]]; then
			COMPREPLY+=( $(compgen -W '--event-mask --buffer-size --label' -- "$cur") )
		elif [[ $str_act = @(-L|--dump) ]]; then
			COMPREPLY+=( $(compgen -W '--family --label --output --zero' -- "$cur") )
		elif [[ $str_act = @(-I|--create) ]]; then
			COMPREPLY+=( $(compgen -W '--label-add' -- "$cur") )
		elif [[ $str_act = @(-G|--get) ]]; then
			COMPREPLY+=( $(compgen -W '--family --label --output --zero' -- "$cur") )
		fi
		# protocol depending options
		if [[ $str_proto = @(dccp|tcp|udp|udplite|sctp) ]]; then
			COMPREPLY+=( $(compgen -W '${arr_proto_svc_opts[@]}' -- "$cur") )
			if [[ $str_proto = @(dccp|tcp) ]]; then
				COMPREPLY+=( $(compgen -W '--state' -- "$cur") )
			elif [[ $str_proto = sctp ]]; then
				COMPREPLY+=( $(compgen -W '--state ${arr_proto_sctp_opts[@]}' -- "$cur") )
			fi
		elif [[ $str_proto = icmp ]]; then
			COMPREPLY+=( $(compgen -W '${arr_proto_icmp_opts[@]}' -- "$cur") )
		elif [[ $str_proto = gre ]]; then
			COMPREPLY+=( $(compgen -W '${arr_proto_gre_opts[@]}' -- "$cur") )
		fi
	# non option request
	elif [[ $cur = * ]]; then
		if [[ $prev = @(-f|--family) ]]; then
			COMPREPLY=( $(compgen -W 'ipv4 ipv6' -- "$cur") )
		elif [[ $prev = --state && $str_proto = tcp ]]; then # tcp state
			COMPREPLY=( $(compgen -W \
				'NONE SYN_SENT SYN_RECV ESTABLISHED FIN_WAIT CLOSE_WAIT LAST_ACK TIME_WAIT CLOSE LISTEN' \
				-- "$cur") )
		elif [[ $prev = --state && $str_proto = sctp ]]; then # sctp state
			COMPREPLY=( $(compgen -W \
				'NONE CLOSED COOKIE_WAIT COOKIE_ECHOED ESTABLISHED SHUTDOWN_SENT SHUTDOWN_RECD SHUTDOWN_ACK_SENT' \
				-- "$cur") )
		elif [[ $prev = --state && $str_proto = dccp ]]; then # dccp state
			COMPREPLY=( $(compgen -W \
				'NONE REQUEST RESPOND PARTOPEN OPEN CLOSEREQ CLOSING TIMEWAIT' \
				-- "$cur") )
		elif [[ $prev = @(-o|--output) && $str_act = @(-L|--dump|-G|--get) ]]; then
			_ct_build_comma_list "$cur" extended xml timestamp id ktimestamp labels
		elif [[ $prev = @(-e|--event-mask) && $str_act = @(-E|--event) ]]; then
			_ct_build_comma_list "$cur" ALL NEW UPDATES DESTROY
		elif [[ $prev = @(-u|--status) ]]; then
			_ct_build_comma_list "$cur" ASSURED SEEN_REPLY FIXED_TIMEOUT EXPECTED UNSET
		elif [[ $prev = @(-p|--proto|--protonum) ]]; then # retrieve protocol names
			[[ -r /etc/protocols ]] || return 0
			local str_name rest
			while read -r str_name rest; do
				[[ $str_name = @(""|*([[:blank:]])#*) ]] && continue
				COMPREPLY+=( "${str_name%%#*}" )
			done < /etc/protocols
			COMPREPLY=( $(compgen -W '${COMPREPLY[@]}' -- "$cur") )
		elif [[ $prev = @($(IFS='|';printf "%s|%s\n" "${arr_proto_svc_opts[*]}")) ]]
		then # retrieve service names
			[[ -r /etc/services ]] || return 0
			while read -r str_name rest; do
				[[ $str_name = @(""|*([[:blank:]])#*) ]] && continue
				COMPREPLY+=( "${str_name%%#*}" )
			done < /etc/services
			COMPREPLY=( $(compgen -W '${COMPREPLY[@]}' -- "$cur") )
		fi
	fi
fi
}

complete -F _conntrack_complete conntrack


