#!/usr/bin/env bash

# -----------------------------------------------------------------
# Programmable completion specification for nfct (netfilter)
# http://www.netfilter.org/projects/conntrack/index.html
#
# Project home:
# https://github.com/AllKind/conntrack-tools-bash_completion
# http://sourceforge.net/p/conntrack-tools-bash-compl
# -----------------------------------------------------------------

# Copyright (C) 2016 Mart Frauenlob aka AllKind (AllKind@fastest.cc)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# -----------------------------------------------------------------
# Requirements:
#
# The bash completion package version 2.0 or greater is recommended.
# https://github.com/scop/bash-completion
# If bash completion is present, and the version includes the
# `_init_completion()' function, completion on variables and redirection
# is available in addition. Otherwise only option completion is fully supported.
# -----------------------------------------------------------------

# -----------------------------------------------------------------
# Installation (quote from bash-completion README):
#
# Install it in one of the directories pointed to by
# bash-completion's pkgconfig file variables.  There are two
# alternatives: the recommended one is 'completionsdir' (get it with
# "pkg-config --variable=completionsdir bash-completion") from which
# completions are loaded on demand based on invoked commands' names,
# so be sure to name your completion file accordingly, and to include
# for example symbolic links in case the file provides completions
# for more than one command.  The other one which is present for
# backwards compatibility reasons is 'compatdir' (get it with
# "pkg-config --variable=compatdir bash-completion") from which files
# are loaded when bash_completion is loaded.
#
# For packages using GNU autotools the installation can be handled
# for example like this in configure.ac:
#
#  PKG_CHECK_VAR(bashcompdir, [bash-completion], [completionsdir], ,
#    bashcompdir="${sysconfdir}/bash_completion.d")
#  AC_SUBST(bashcompdir)
#
# ...accompanied by this in Makefile.am:
#
#  bashcompdir = @bashcompdir@
#  dist_bashcomp_DATA = # completion files go here
#
# For cmake we ship the bash-completion-config.cmake and
# bash-completion-config-version.cmake files. Example usage:
#
#  find_package(bash-completion)
#  if(BASH_COMPLETION_FOUND)
#    message(STATUS
#      "Using bash completion dir ${BASH_COMPLETION_COMPLETIONSDIR}")
#  else()
#    set (BASH_COMPLETION_COMPLETIONSDIR "/etc/bash_completion.d")
#    message (STATUS
#      "Using fallback bash completion dir ${BASH_COMPLETION_COMPLETIONSDIR}")
#  endif()
#
#  install(FILES your-completion-file DESTINATION
#    ${BASH_COMPLETION_COMPLETIONSDIR})
#
# For backwards compatibility it is still possible to put it into
# ~/.bash_completion or /etc/bash_completion.d/.
# -----------------------------------------------------------------
#
# Version 1.0
#
# -----------------------------------------------------------------

shopt -s extglob

_nfct_complete() {
local cur prev cword words
local str_cmd str_subsys
local -i i
local -a arr_tnames=(
syn_sent syn_recv established
fin_wait close_wait last_ack time_wait close
syn_sent2 retrans unackknowledged
)

COMPREPLY=()

# if _init_completion() from bash_completion is available, use it to deal with
# variables and redirections. otherwise use _get_comp_words_by_ref().
# as fallback we commpose our own variables.
if declare -f _init_completion &>/dev/null; then
	_init_completion || return # ret val -gt 0 = nothing more to do
elif declare -f _get_comp_words_by_ref &>/dev/null; then
    _get_comp_words_by_ref cur prev cword words || return
else # not so neat, but a workaround
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    cword=$COMP_CWORD
    for i in ${!COMP_WORDS[@]}; do words[i]="${COMP_WORDS[i]}"; done
fi

if [[ ${words[1]} = @(list|add|delete|get|disable|default-get|default-set) ]]; then
	str_cmd="${words[1]}"
fi
if [[ ${words[2]} = @(timeout|helper) ]]; then
	str_subsys="${words[2]}"
fi

if ((cword == 1)); then # main command
	COMPREPLY=($(compgen -W 'list add delete get disable default-get default-set' -- "$cur"))
elif ((cword == 2)); then # subsystem
	if [[ $str_cmd = @(default-get|default-set)  ]]; then
		COMPREPLY=($(compgen -W 'timeout help version' -- "$cur"))
	elif [[ $str_cmd = disable  ]]; then
		COMPREPLY=($(compgen -W 'helper help version' -- "$cur"))
	else
		COMPREPLY=($(compgen -W 'timeout helper help version' -- "$cur"))
	fi
elif ((cword == 3)); then
	if [[ $str_cmd = @(list|add|get|delete|disable) ]]; then
		# no more options available, or retrieval of object names not yet implemented
		return 0
	fi
	# family
	if [[ $str_cmd = default-set && $str_subsys = timeout ]]; then
		COMPREPLY=($(compgen -W 'inet inet6' -- "$cur"))
	fi
elif ((cword == 4)); then
	if [[ $str_cmd = add ]]; then # add for timeout and helper
		COMPREPLY=($(compgen -W 'inet inet6' -- "$cur"))
	elif [[ $str_cmd = default-set && $str_subsys = timeout ]]; then
		COMPREPLY=($(compgen -W 'tcp udp' -- "$cur"))
	fi
elif ((cword == 5)); then
	if [[ $str_cmd = add ]]; then # add for timeout and helper
		COMPREPLY=($(compgen -W 'tcp udp' -- "$cur"))
	elif [[ $str_cmd = default-set && $str_subsys = timeout && $prev != @($(IFS='|';printf "%s\n" "${arr_tnames[*]}")) ]]
	then
		COMPREPLY=($(compgen -W '${arr_tnames[@]}' -- "$cur"))
	fi
elif ((cword >= 5)); then
	if [[ $str_subsys = timeout && $str_cmd = @(add|default-set) && $prev != @($(IFS='|';printf "%s\n" "${arr_tnames[*]}")) ]]
	then
		COMPREPLY=($(compgen -W '${arr_tnames[@]}' -- "$cur"))
	fi
fi
}

complete -F _nfct_complete nfct

